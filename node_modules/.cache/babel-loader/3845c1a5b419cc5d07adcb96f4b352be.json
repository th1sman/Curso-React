{"ast":null,"code":"import locationHook from \"./use-location.js\";\nimport makeMatcher from \"./matcher.js\";\nimport { useRef, useLayoutEffect, useContext, useCallback, createContext, isValidElement, cloneElement, createElement as h, Fragment } from \"./react-deps.js\";\n/*\r\n * Part 1, Hooks API: useRouter, useRoute and useLocation\r\n */\n// one of the coolest features of `createContext`:\n// when no value is provided â€” default object is used.\n// allows us to use the router context as a global ref to store\n// the implicitly created router (see `useRouter` below)\n\nconst RouterCtx = createContext({});\n\nconst buildRouter = ({\n  hook = locationHook,\n  base = \"\",\n  matcher = makeMatcher()\n} = {}) => ({\n  hook,\n  base,\n  matcher\n});\n\nexport const useRouter = () => {\n  const globalRef = useContext(RouterCtx); // either obtain the router from the outer context (provided by the\n  // `<Router /> component) or create an implicit one on demand.\n\n  return globalRef.v || (globalRef.v = buildRouter());\n};\nexport const useLocation = () => {\n  const router = useRouter();\n  return router.hook(router);\n};\nexport const useRoute = pattern => {\n  const [path] = useLocation();\n  return useRouter().matcher(pattern, path);\n}; // internal hook used by Link and Redirect in order to perform navigation\n\nconst useNavigate = options => {\n  const navRef = useRef();\n  const [, navigate] = useLocation();\n\n  navRef.current = () => navigate(options.to || options.href, options);\n\n  return navRef;\n};\n/*\r\n * Part 2, Low Carb Router API: Router, Route, Link, Switch\r\n */\n\n\nexport const Router = props => {\n  const ref = useRef(); // this little trick allows to avoid having unnecessary\n  // calls to potentially expensive `buildRouter` method.\n  // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n\n  const value = ref.current || (ref.current = {\n    v: buildRouter(props)\n  });\n  return h(RouterCtx.Provider, {\n    value,\n    children: props.children\n  });\n};\nexport const Route = ({\n  path,\n  match,\n  component,\n  children\n}) => {\n  const useRouteMatch = useRoute(path); // `props.match` is present - Route is controlled by the Switch\n\n  const [matches, params] = match || useRouteMatch;\n  if (!matches) return null; // React-Router style `component` prop\n\n  if (component) return h(component, {\n    params\n  }); // support render prop or plain children\n\n  return typeof children === \"function\" ? children(params) : children;\n};\nexport const Link = props => {\n  const navRef = useNavigate(props);\n  const {\n    base\n  } = useRouter();\n  let {\n    to,\n    href = to,\n    children,\n    onClick\n  } = props;\n  const handleClick = useCallback(event => {\n    // ignores the navigation when clicked using right mouse button or\n    // by holding a special modifier key: ctrl, command, win, alt, shift\n    if (event.ctrlKey || event.metaKey || event.altKey || event.shiftKey || event.button !== 0) return;\n    event.preventDefault();\n    navRef.current();\n    onClick && onClick(event);\n  }, // navRef is a ref so it never changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [onClick]); // wraps children in `a` if needed\n\n  const extraProps = {\n    // handle nested routers and absolute paths\n    href: href[0] === \"~\" ? href.slice(1) : base + href,\n    onClick: handleClick,\n    to: null\n  };\n  const jsx = isValidElement(children) ? children : h(\"a\", props);\n  return cloneElement(jsx, extraProps);\n};\n\nconst flattenChildren = children => {\n  return Array.isArray(children) ? [].concat(...children.map(c => c.type === Fragment ? flattenChildren(c.props.children) : flattenChildren(c))) : [children];\n};\n\nexport const Switch = ({\n  children,\n  location\n}) => {\n  const {\n    matcher\n  } = useRouter();\n  const [originalLocation] = useLocation();\n\n  for (const element of flattenChildren(children)) {\n    let match = 0;\n    if (isValidElement(element) && // we don't require an element to be of type Route,\n    // but we do require it to contain a truthy `path` prop.\n    // this allows to use different components that wrap Route\n    // inside of a switch, for example <AnimatedRoute />.\n    (match = element.props.path ? matcher(element.props.path, location || originalLocation) : [true, {}])[0]) return cloneElement(element, {\n      match\n    });\n  }\n\n  return null;\n};\nexport const Redirect = props => {\n  const navRef = useNavigate(props); // empty array means running the effect once, navRef is a ref so it never changes\n\n  useLayoutEffect(() => {\n    navRef.current();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return null;\n};\nexport default useRoute;","map":{"version":3,"sources":["C:/Users/Jaime/Desktop/Dev/Curso-React/node_modules/wouter/index.js"],"names":["locationHook","makeMatcher","useRef","useLayoutEffect","useContext","useCallback","createContext","isValidElement","cloneElement","createElement","h","Fragment","RouterCtx","buildRouter","hook","base","matcher","useRouter","globalRef","v","useLocation","router","useRoute","pattern","path","useNavigate","options","navRef","navigate","current","to","href","Router","props","ref","value","Provider","children","Route","match","component","useRouteMatch","matches","params","Link","onClick","handleClick","event","ctrlKey","metaKey","altKey","shiftKey","button","preventDefault","extraProps","slice","jsx","flattenChildren","Array","isArray","concat","map","c","type","Switch","location","originalLocation","element","Redirect"],"mappings":"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","sourcesContent":["import locationHook from \"./use-location.js\";\r\nimport makeMatcher from \"./matcher.js\";\r\n\r\nimport {\r\n  useRef,\r\n  useLayoutEffect,\r\n  useContext,\r\n  useCallback,\r\n  createContext,\r\n  isValidElement,\r\n  cloneElement,\r\n  createElement as h,\r\n  Fragment,\r\n} from \"./react-deps.js\";\r\n\r\n/*\r\n * Part 1, Hooks API: useRouter, useRoute and useLocation\r\n */\r\n\r\n// one of the coolest features of `createContext`:\r\n// when no value is provided â€” default object is used.\r\n// allows us to use the router context as a global ref to store\r\n// the implicitly created router (see `useRouter` below)\r\nconst RouterCtx = createContext({});\r\n\r\nconst buildRouter = ({\r\n  hook = locationHook,\r\n  base = \"\",\r\n  matcher = makeMatcher(),\r\n} = {}) => ({ hook, base, matcher });\r\n\r\nexport const useRouter = () => {\r\n  const globalRef = useContext(RouterCtx);\r\n\r\n  // either obtain the router from the outer context (provided by the\r\n  // `<Router /> component) or create an implicit one on demand.\r\n  return globalRef.v || (globalRef.v = buildRouter());\r\n};\r\n\r\nexport const useLocation = () => {\r\n  const router = useRouter();\r\n  return router.hook(router);\r\n};\r\n\r\nexport const useRoute = (pattern) => {\r\n  const [path] = useLocation();\r\n  return useRouter().matcher(pattern, path);\r\n};\r\n\r\n// internal hook used by Link and Redirect in order to perform navigation\r\nconst useNavigate = (options) => {\r\n  const navRef = useRef();\r\n  const [, navigate] = useLocation();\r\n\r\n  navRef.current = () => navigate(options.to || options.href, options);\r\n  return navRef;\r\n};\r\n\r\n/*\r\n * Part 2, Low Carb Router API: Router, Route, Link, Switch\r\n */\r\n\r\nexport const Router = (props) => {\r\n  const ref = useRef();\r\n\r\n  // this little trick allows to avoid having unnecessary\r\n  // calls to potentially expensive `buildRouter` method.\r\n  // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\r\n  const value = ref.current || (ref.current = { v: buildRouter(props) });\r\n\r\n  return h(RouterCtx.Provider, {\r\n    value,\r\n    children: props.children,\r\n  });\r\n};\r\n\r\nexport const Route = ({ path, match, component, children }) => {\r\n  const useRouteMatch = useRoute(path);\r\n\r\n  // `props.match` is present - Route is controlled by the Switch\r\n  const [matches, params] = match || useRouteMatch;\r\n\r\n  if (!matches) return null;\r\n\r\n  // React-Router style `component` prop\r\n  if (component) return h(component, { params });\r\n\r\n  // support render prop or plain children\r\n  return typeof children === \"function\" ? children(params) : children;\r\n};\r\n\r\nexport const Link = (props) => {\r\n  const navRef = useNavigate(props);\r\n  const { base } = useRouter();\r\n\r\n  let { to, href = to, children, onClick } = props;\r\n\r\n  const handleClick = useCallback(\r\n    (event) => {\r\n      // ignores the navigation when clicked using right mouse button or\r\n      // by holding a special modifier key: ctrl, command, win, alt, shift\r\n      if (\r\n        event.ctrlKey ||\r\n        event.metaKey ||\r\n        event.altKey ||\r\n        event.shiftKey ||\r\n        event.button !== 0\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      navRef.current();\r\n      onClick && onClick(event);\r\n    },\r\n    // navRef is a ref so it never changes\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [onClick]\r\n  );\r\n\r\n  // wraps children in `a` if needed\r\n  const extraProps = {\r\n    // handle nested routers and absolute paths\r\n    href: href[0] === \"~\" ? href.slice(1) : base + href,\r\n    onClick: handleClick,\r\n    to: null,\r\n  };\r\n  const jsx = isValidElement(children) ? children : h(\"a\", props);\r\n\r\n  return cloneElement(jsx, extraProps);\r\n};\r\n\r\nconst flattenChildren = (children) => {\r\n  return Array.isArray(children)\r\n    ? [].concat(\r\n        ...children.map((c) =>\r\n          c.type === Fragment\r\n            ? flattenChildren(c.props.children)\r\n            : flattenChildren(c)\r\n        )\r\n      )\r\n    : [children];\r\n};\r\n\r\nexport const Switch = ({ children, location }) => {\r\n  const { matcher } = useRouter();\r\n  const [originalLocation] = useLocation();\r\n\r\n  for (const element of flattenChildren(children)) {\r\n    let match = 0;\r\n\r\n    if (\r\n      isValidElement(element) &&\r\n      // we don't require an element to be of type Route,\r\n      // but we do require it to contain a truthy `path` prop.\r\n      // this allows to use different components that wrap Route\r\n      // inside of a switch, for example <AnimatedRoute />.\r\n      (match = element.props.path\r\n        ? matcher(element.props.path, location || originalLocation)\r\n        : [true, {}])[0]\r\n    )\r\n      return cloneElement(element, { match });\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const Redirect = (props) => {\r\n  const navRef = useNavigate(props);\r\n\r\n  // empty array means running the effect once, navRef is a ref so it never changes\r\n  useLayoutEffect(() => {\r\n    navRef.current();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return null;\r\n};\r\n\r\nexport default useRoute;\r\n"]},"metadata":{},"sourceType":"module"}